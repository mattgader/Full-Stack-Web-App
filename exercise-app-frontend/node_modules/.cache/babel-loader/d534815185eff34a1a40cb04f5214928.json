{"ast":null,"code":"var _jsxFileName = \"/Users/mgader/Documents/CS 290/assignment#6/exercise-app-frontend/src/pages/EditPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EditPage = _ref => {\n  _s();\n\n  var _exerciseToEdit$date, _exerciseToEdit$date$;\n\n  let {\n    exerciseToEdit\n  } = _ref;\n  const formattedDate = (_exerciseToEdit$date = exerciseToEdit.date) === null || _exerciseToEdit$date === void 0 ? void 0 : (_exerciseToEdit$date$ = _exerciseToEdit$date.substr) === null || _exerciseToEdit$date$ === void 0 ? void 0 : _exerciseToEdit$date$.call(_exerciseToEdit$date, 0, 10);\n  const [name, setName] = useState(exerciseToEdit.name);\n  const [reps, setReps] = useState(exerciseToEdit.reps);\n  const [weight, setWeight] = useState(exerciseToEdit.weight);\n  const [unit, setUnit] = useState(exerciseToEdit.unit);\n  const [date, setDate] = useState(formattedDate);\n  const history = useHistory();\n\n  const editExercise = async () => {\n    const response = await fetch(`/exercises/${exerciseToEdit._id}`, {\n      method: 'PUT',\n      body: JSON.stringify({\n        name: name,\n        reps: reps,\n        weight: weight,\n        unit: unit,\n        date: date\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }); // history.push('/')\n    // alert(\"Successfully edited the exercise!\")\n\n    if (response.status === 200) {\n      alert(\"Successfully edited the movie!\");\n      history.push(\"/\");\n    } else {\n      alert(`Failed to edit movie, status code = ${response.status}`);\n    }\n  }; // const editMovie = async () => {\n  //     const editedMovie = {title, year, language};\n  //     const response = await fetch(`/movies/${movieToEdit._id}`, {\n  //         method: 'PUT',\n  //         body: JSON.stringify(editedMovie),\n  //         headers: {\n  //             'Content-Type': 'application.json'\n  //         },\n  //     });\n  //     if (response.status === 200) {\n  //         alert('Successfully edited the movie')\n  //     } else {\n  //         alert(`Failed to edit movie, status code = ${response.status}`);\n  //     }\n  //     history.push('/');\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Exercise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Edit the exercise using the boxes below. Then click the Save button.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: reps,\n      onChange: e => setReps(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: weight,\n      onChange: e => setWeight(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"unit\" // type=\"text\"\n      ,\n      value: unit,\n      onChange: e => setUnit(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"lbs\",\n        selected: true,\n        children: \"lbs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"kgs\",\n        children: \"kgs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"miles\",\n        children: \"Miles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      value: date,\n      onChange: e => setDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: editExercise,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditPage, \"6h4ZeFXa+akxqPrFFBcUkPkdN5U=\", false, function () {\n  return [useHistory];\n});\n\n_c = EditPage;\nexport default EditPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPage\");","map":{"version":3,"sources":["/Users/mgader/Documents/CS 290/assignment#6/exercise-app-frontend/src/pages/EditPage.js"],"names":["React","useState","useHistory","EditPage","exerciseToEdit","formattedDate","date","substr","name","setName","reps","setReps","weight","setWeight","unit","setUnit","setDate","history","editExercise","response","fetch","_id","method","body","JSON","stringify","headers","status","alert","push","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const EditPage = ({ exerciseToEdit }) => {\r\n\r\n    const formattedDate = exerciseToEdit.date?.substr?.(0,10);\r\n    const [name, setName] = useState(exerciseToEdit.name);\r\n    const [reps, setReps] = useState(exerciseToEdit.reps);\r\n    const [weight, setWeight] = useState(exerciseToEdit.weight);\r\n    const [unit, setUnit] = useState(exerciseToEdit.unit);\r\n    const [date, setDate] = useState(formattedDate);\r\n\r\n    const history = useHistory();\r\n\r\n    const editExercise = async () => {\r\n        const response = await fetch(`/exercises/${exerciseToEdit._id}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({ \r\n                name: name, \r\n                reps: reps, \r\n                weight: weight,\r\n                unit: unit,\r\n                date: date \r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n        // history.push('/')\r\n        // alert(\"Successfully edited the exercise!\")\r\n\r\n        if (response.status === 200) {\r\n             alert(\"Successfully edited the movie!\");\r\n             history.push(\"/\");\r\n        } else {\r\n             alert(`Failed to edit movie, status code = ${response.status}`);\r\n        }     \r\n    };\r\n    // const editMovie = async () => {\r\n    //     const editedMovie = {title, year, language};\r\n    //     const response = await fetch(`/movies/${movieToEdit._id}`, {\r\n    //         method: 'PUT',\r\n    //         body: JSON.stringify(editedMovie),\r\n    //         headers: {\r\n    //             'Content-Type': 'application.json'\r\n    //         },\r\n    //     });\r\n    //     if (response.status === 200) {\r\n    //         alert('Successfully edited the movie')\r\n    //     } else {\r\n    //         alert(`Failed to edit movie, status code = ${response.status}`);\r\n    //     }\r\n    //     history.push('/');\r\n    // };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Edit Exercise</h2>\r\n            <p>Edit the exercise using the boxes below. Then click the Save button.</p>\r\n            <input\r\n                type=\"text\"\r\n                value={name}\r\n                onChange={e => setName(e.target.value)} />\r\n            <input\r\n                type=\"number\"\r\n                value={reps}\r\n                onChange={e => setReps(e.target.value)} />\r\n            <input\r\n                type=\"text\"\r\n                value={weight}\r\n                onChange={e => setWeight(e.target.value)} />\r\n            <select name='unit'\r\n                // type=\"text\"\r\n                value={unit}\r\n                onChange={e => setUnit(e.target.value)}>\r\n                <option value='lbs' selected>lbs</option>\r\n                <option value='kgs'>kgs</option>\r\n                <option value='miles'>Miles</option>\r\n            </select>\r\n            <input\r\n                type=\"date\"\r\n                value={date}\r\n                onChange={e => setDate(e.target.value)} />\r\n            <br></br>\r\n            <button\r\n                onClick={editExercise}\r\n            >Save</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditPage;"]},"metadata":{},"sourceType":"module"}